Aplikacje mobilne tworzone sa w oparciu o Agile - oznacza to czeste zmiany, szybki feedback i proces ciagłego testowania, przy ścisłej w spółracy z developerami.
Możliwości i wyzwania w przypadku testów aplikacji mobilnych różnią się nieco od tych w aplikacjach serwerowych czy desktopowych. 
Sytuację dodatkowo komplikuje olbrzymia liczba modeli urządzeń mobilnych dostępnych na rynku (System Android jest dostępny na ponad 11 000 modeli urządzeń i ta liczba wciąż rośnie, am tylko Samsung ma w swojej ofercie ponad 1 000 modeli z Androidem).

Unit testy
Wiele tego typu projektów tworzonych jest bowiem w modelu „cienkiego klienta”, co oznacza, że większość procesów logiki biznesowej jest zaimplementowana po stronie serwera, a rolą aplikacji jest jedynie pobrać i wyświetlić dane. Ten model jest preferowany, ponieważ umożliwia jednorazową implementację architektury logiki biznesowej po stronie serwera i używanie jej na każdej platformie (mobilnej, webowej i desktopowej). Niestety taki model działania aplikacji sprawia także, że testy jednostkowe stają się mało użyteczne – w tym przypadku bowiem większość logiki biznesowej jest poza właściwą aplikacją, gdzie znajduje się jedynie interfejs użytkownika, dla którego tego typu testy sprawdzają się tylko w bardzo ograniczonym zakresie. Testy jednostkowe będą przydatne jedynie w testowaniu technicznych aspektów interfejsu – poprawnej inicjalizacji, obsługi rotacji ekranu, zapisywania danych użytkownika, sprawdzania poprawności danych odebranych z web service’ów itd.

Automatyczny end to end
Automatyczne testowanie interfejsu użytkownika (UI) to odpowiedź na wspomniane wcześniej problemy z testami jednostkowymi. Zamiast skupiać się na testowaniu pojedynczych fragmentów kodu, testowana jest w tym przypadku aplikacja jako całość
Wbrew nazwie, ten model testowania nie służy tylko do sprawdzania interfejsu – testuje się w ten sposób całą aplikacje, tyle że z perspektywy użytkownika. Zamiast ręcznie wywoływać fragmenty kodu, testuje się efekt interakcji przez symulowane zachowania użytkownika. Można na przykład symulować naciśnięcie przycisku w aplikacji i sprawdzić, czy w rezultacie na ekranie pojawi się oczekiwany wynik. Ta metoda pozwala na przetestowanie całości aplikacji – zarówno UI, czy wewnętrznego kodu komunikacji z web service’ami, jak i kodu po stronie serwera, odpowiadającego na zapytania. Co więcej, tego typu testy pozwalają sprawdzić, czy aplikacja nie zawiesza się podczas pracy.

Beta testy
Nawet dokładnie przetestowana aplikacja może wciąż doświadczać pewnych problemów, powodujących błędy. Nowe urządzenia i wersje systemów operacyjnych pojawiają się cały czas i mogą powodować problemy z poprawnym działaniem aplikacji. Dlatego przed finalną publikacją, dobrym pomysłem jest publikacja aplikacji w trybie beta testu. Aplikacja będzie dostępna dla wszystkich, ale recenzje i oceny z wersji beta zostaną usunięte, gdy ostateczna wersja zostanie opublikowana (dzięki czemu potencjalne problemy wersji beta nie wpłyną negatywnie na gotową aplikację). Dzięki narzędziom do automatycznego raportowania błędów, za każdym razem, gdy aplikacja się zawiesi na urządzeniu użytkownika, programista otrzyma szczegółowy raport zawierający przyczynę błędu oraz informację o tym, na jakim urządzeniu takie zdarzenie wystąpiło. Dzięki temu, możliwe jest wyeliminowanie błędów, które nie zostały wykryte wcześniej, a które występują u użytkowników biorących udział w beta testach.
https://www.jcommerce.pl/jpro/artykuly/jak-skutecznie-testowac-aplikacje-mobilne
